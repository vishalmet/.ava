# {"ack": true, "pow_always": true, "pow_bits": 12}

To require pk and set toggles:
First line in .x3:
{"pk":"YOUR_PRIVATE_KEY", "pow_always": true, "pow_bits": 16, "show_json": false}



-----------------------------------------------------------------------------------------------------


--no-json: hide JSON output for the whole session
--json: re-enable JSON output for the session
You can also prefix a single command with --no-json to hide JSON only for that execution.
Header show_json still works but cannot override a CLI --no-json.
Added a welcome screen at startup:
Title: ava — The Decentralized Programming Language
Version and quick tips (help(), --no-json)
Run examples:
python shell.py --no-json
[.ava] >>> --no-json
[.ava] >>> help()


-----------------------------------------------------------------------------------------------------


exit, convert, deploy\


pow_cfg(1, 18)




code_convert_project("file.ava", "solidity", "./out/sol_project")



File-only conversion:
code_convert("ava_core/file.ava", "solidity")
code_convert("ava_core/file.ava", "rust", "gsk_your_api_key")
One-click project:
Solidity Hardhat project:
code_convert_project("ava_core/file.ava", "solidity", "./out/sol_project")
Rust Cargo project:
code_convert_project("ava_core/file.ava", "rust", "./out/rs_project")
With key, preset, overwrite:
code_convert_project("ava_core/file.ava", "solidity", "./out/sol_project", "gsk_...", "solidity-hardhat", 1)





-----------------------------------------------------------------------------------------------------

Endpoints
POST /convert-code
Body: { source_code: string, target_language: "solidity"|"rust", api_key?: string, system?: string }
Returns: { language, code }
POST /convert-project
Body: { source_code: string, target_language: "solidity"|"rust", api_key?: string, preset?: string }
Returns: { projectType, files: [{ path, content }], nextSteps }
No files are written; manifest is normalized and returned.



---------------------------


result = deploy_contract_from_source(
  solidity_source=source,
  rpc_url="https://eth-sepolia.public.blastapi.io",
  private_key="af2c4a3435ba7c4bdb6d8269c00efe49826f35b46c253edeb2ceafae8cedfdc6",
  constructor_args=[5],   # <-- required arg
)



[ava] » deploy("asd.ava", "af2c4a3435ba7c4bdb6d8269c00efe49826f35b46c253edeb2ceafae8cedfdc6", "gsk_dQZTDLBuskjxOVYnpPfCWGdyb3FYrhe9nYaDSg6DS4wDKmaWNan 
R")



read the codee of the compiler and... write the user documeaantation for this language from the scratch like from variable to loops and functions and it's inbuild functions and options for that.. write the complete documantation 
hardcode the all of the document and send it as a string based on this train the bot and answer the ava lang coder

C:\Users\Admin\AppData\Roaming\Python\Python312\Scripts\pyinstaller --name ava --onefile --console --paths ava_core ava_core\shell.py


$env:Path += ";$env:APPDATA\Python\Python312\Scripts"; pyinstaller --name ava --onefile --console --paths ava_core ava_core\shell.py



use any other method to solve this issue i should deploy the code inserverless